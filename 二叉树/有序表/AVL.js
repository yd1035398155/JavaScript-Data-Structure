// 1.若节点的左子树不为空,则左子树所有的值都比该节点小
// 2.若节点的右子树不为空,则右子树所有的值都比该节点大
// 4.左右子树高度差不超过1
// 3.左右子树也是平衡二叉搜索树

/*
删除逻辑
1.如果删除节点没有左孩子,直接将右孩子移动到该点
2.如果删除节点没有右孩子,直接将左孩子移动到该点
3.如果左右双全(e是前驱,f是后继,用前驱或者后继替代该节点)
	1)找到右子树最左边的点f(右子树最小节点)
	2)将a换为f
	3)将f的右子树给c的左子树
           a
					/ \
				b     c
			 / \   / \ 
			d   e  f  g 
          /   \
				 j		 h			
平衡性调整
1.左旋
	  			 a                    
					/ \      
				b     c    
			 / \   / \   
			d   e  f  g  

	  			 c                    
					/ \      
				a    g    
			 / \      
			b   f    
     / \
    d   e
2.右旋同理
平衡性失效类型:
LL:右旋解决
RR:左旋解决
LR:左旋右旋解决
RL:右旋左旋解决
例如LR(因为左孩子的右孩子,平衡性失效),想办法把e变成头节点(对b整棵树左旋,然后对a整棵树右旋)
	  			 a                    
					/ \      
				b     c    
			 / \   
			d   e 

		对b整棵树左旋
				   a     
					/ \      
				e     c    
			 /    
			b    
		 /
		d
		然后对a整棵树右旋
				   e                    
					/ \      
				b    a    
			 /      \
			d        c
*/
